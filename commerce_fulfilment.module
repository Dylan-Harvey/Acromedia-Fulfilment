<?php
/**
 * @return array
 *
 * implements hook hook_menu()
 * builds the menu tabs for the site, both in the admin bar and in the page overlay.
 *
 */
function commerce_fulfilment_menu() {
    $items = array();

    /**
     * Creates the commerce fulfilment link
     */
    $items['admin/commerce/manage-orders/commerce_fulfilment'] = array(
        'title' => 'Commerce Fulfilment',
        'access arguments'=>array('access content'),
        'page callback' => 'drupal_get_form',
        'page arguments'=>array('commerce_fulfilment_landing_form'),
        'type' => MENU_NORMAL_ITEM,
        'weight' => 50
    );
    $items['admin/commerce/manage-orders/commerce_fulfilment/admin'] = array(
        'title'=> 'Admin Options',
        'access arguments'=>array('access content'),
        'page callback' => 'drupal_get_form',
        'page arguments'=>array('commerce_fulfilment_admin_form'),
    );
    /**
     * creates link to the package page
     */
    $items['admin/commerce/manage-orders/%commerce_order/orders'] = array(
        'title' => 'Edit',
        'page callback' => 'orders_content',
        'page arguments' => array(3),
        'access callback' => 'commerce_order_access',
        'access arguments' => array('update', 3),
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'weight' => -7,
        'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    );

    /**
     * Creates link to the shipment page.
     */
    $items['admin/commerce/manage-orders/commerce_fulfilment/shipments'] = array(
        'title' => t('Shipments'),
        'description' => t('Shipments tab'),
        'page callback' => 'shipments_content',
        'type' => MENU_LOCAL_TASK,
        'access callback' => true,
        'weight' => 1
    );


    return $items;
}

/**
 * @param $order
 * @return string
 *
 * Builds the package page.
 * Pulls in Order info and displays the name of the products in Order 4.
 *
 */
function orders_content($order) {

        dpm($order);
        $line_id = $order->commerce_line_items[und];
        dpm($line_id);
        $products = commerce_product_load_multiple($line_id);
        dpm($products);
        $output = '<h2>' . t('Products in order:') . '</h2>';
    foreach($products as $product){
        $output .= '<p>'.$product->sku.'</p>';
    }
        return $output;
}

/**
 * @return string
 *
 * Builds the shipments page
 *
 */
function shipments_content() {
    return '<h2>'.t('Shipments info').'</h2>';
}
/**
 * loads an array of order objects.
 * If there is no index chosen, Returns the array.
 * If there is an index chosen. Returns the data in the array at that index.
 */
function commerce_fulfilment_get_array($index = FALSE)
{
    $orders = commerce_order_load_multiple(array(), array('status' => 'pending'));
    dpm($orders);
    $order_id = array();
    $count = 0;
    /**
     * Creates an array of order id's for the select box.
     */
    foreach ($orders as $order) {
        $order_id[$count] = $order->order_number;
        $count++;
    }

 if($index !== FALSE && is_int($index) && $index <= count($order_id))
    {
        return $order_id[$index];
    }
    return $order_id;
}
/**
 * @return array
 * Implements hook hook_menu
 * A form for the user to select which order they would like to see.
 */
function commerce_fulfilment_landing_form($form, &$form_state){

    $form = array();
    $form['title'] = array(
        '#markup' => '<h2>Commerce Fulfilment:</h2>'
    );
    $form['select'] = array(
        '#type' => 'select',
        '#title' => t("Choose from list of pending orders:"),
        '#options' => commerce_fulfilment_get_array()
    );
    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Submit')
    );
return $form;
}

/**
 * @param $form
 * @param $form_state
 * Implements hook_form_validate
 *
 *
 */
function commerce_fulfilment_landing_form_validate($form, &$form_state){
}

/*
 * @param $form
 * @param $form_state
 * Implements hook_form_submit().
 * Gets the value of the index selected by the select form, then redirects to the
 * admin/commerce/manage-orders/$arguments/orders page.
 */
function commerce_fulfilment_landing_form_submit($form,&$form_state){
    $argument = commerce_fulfilment_get_array((int)$form_state['values']['select']);
    $form_state['redirect'] = 'admin/commerce/manage-orders/' .$argument.'/orders';
}
/**
 *
 * @return array
 * Implements hook_form
 * Creates an admin page form
 * Will use this data to print packing slips and shipping labels
 */
function commerce_fulfilment_admin_form(){
    $form = array();
    $form['title'] = array(
        '#markup' => '<h2>Admin Page</h2>'
    );
    /**
     * Creates seperate information fields
     */
    $form['Company Information']=array(
        '#type'=>'fieldset',
        '#title'=>t("Enter your company's information below"),
        '#description'=>'Enter information to use on Packing Slips and Shipping Labels.'
    );
    /**
     * Textfields
     */
    $form['Company Information']['company'] = array(
        '#type'=>'textfield',
        '#title'=>t('Company name:'),
    );
    $form['Company Information']['address'] = array(
        '#type'=>'textfield',
        '#title'=>t('Address:')
    );
    $form['Company Information']['phone'] = array(
        '#type'=>'textfield',
        '#title'=>t('Company Phone Number:')
    );
    /**
     * Allows user to upload company logo
     */
    $form['#attributes']['enctype'] = 'multipart/form-data';

    $form['Company Information']['logo']=array(
        '#type'=>'file',
        '#title'=>t('Upload your company logo:'),
    );
    /**
     * Submit button
     */
    $form['submit']=array(
        '#type'=>'submit',
        '#value'=>t('Submit')
    );
    return $form;
}
/**
 * Implements hook hook_form_validate
 * Validates information entered into the form
 */
function commerce_fulfilment_admin_form_validate($form, &$form_state){
    if(empty($form_state['values']['company']))
        form_set_error('company','Company cannot be empty');
    if(empty($form_state['values']['address']))
        form_set_error('address','Address cannot be empty');
    if(empty($form_state['values']['phone']))
        form_set_error('phone','Phone cannot be empty');
}

/**
 * @param $form
 * @param $form_state
 *
 * Allows the form to submit its information and display a message.
 *
 */
function commerce_fulfilment_admin_form_submit($form, &$form_state){
    drupal_set_message('Form has been submitted');
}
/**
 * @return array
 * implements hook hook_admin_paths()
 * allows us to us the admin bar.
 */
function commerce_fulfilment_admin_paths() {
    $paths = array(
        'commerce/manage-orders/commerce_fulfilment/*/add' => TRUE,
        'commerce/manage-orders/commerce_fulfilment/*/edit' => TRUE,
    );
    return $paths;
}

/**
 * @return array
 * implement hook hook_overlay_paths()
 *
 */
function commerce_fulfilment_overlay_paths() {
    $paths = array(
        'commerce/manage-orders/commerce_fulfilment/*/add' => TRUE,
        'commerce/manage-orders/commerce_fulfilment/*/edit' => array(
            'width' => 500,
        ),
    );
    return $paths;
}


//Implements hook_entity_info()
function package_entity_info(){
$info = array();

$info['package'] = array(
	'label' => t('package'),
	'base_table' => 'commerce_fulfillment_packages',
	'entity keys' => array(
		'package_id' => 'package_id',
	),
);
return $info;
}

//Implements hook_entity_info()
function shipment_entity_info(){
$info = array();

$info['package'] = array(
	'label' => t('shipment'),
	'base_table' => 'commerce_fulfillment_shipments',
	'entity keys' => array(
		'shipment_id' => 'shipment_id',
	),
);
return $info;
}
