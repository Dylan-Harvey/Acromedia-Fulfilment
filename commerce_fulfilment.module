<?php
/***********************************************************************************
 * This file is part of Commerce Fulfilment. A drupal module used to fulfil        *
 * orders placed in the Drupal Commerce module.                                    *
 *                                                                                 *
 * Authors: Dylan Harvey, Evan Schisler, Levi Weir, Parker Groenewoud              *
 *                                                                                 *
 * Project for COSC224 - Projects in Computer Science at Okanagan College.         *
 * Sponsored by AcroMedia                                                          *
 *                                                                                 *
 *                                                                                 *
 * Version: 1.0 - 12/03/15 - (Code before header)                                  *
 *          1.1 - 26/03/15 - (Code after header)                                   *
 *          1.2 - 06/04/14 - (Added implementation for packages.)                  *
 *          1.3 - 07/04/14 - (Product into package functional. One bug with forms) *
 *          1.4 - 07/04/14 - (Menu tabs fixed, unnecessary code removed)           *
 *          1.5 - 08/04/14 - (Fixed the multiple forms bug)                        *
 * Originially from: http://choosealicense.com/licenses/mit/                       *
 * The MIT License (MIT)                                                           *
 *                                                                                 *
 *                                                                                 *
 *                                                                                 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy    *
 * of this software and associated documentation files (the "Software"), to deal   *
 * in the Software without restriction, including without limitation the rights    *
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell       *
 * copies of the Software, and to permit persons to whom the Software is           *
 * furnished to do so, subject to the following conditions:                        *
 *                                                                                 *
 * The above copyright notice and this permission notice shall be included in all  *
 * copies or substantial portions of the Software.                                 *
 *                                                                                 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR      *
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,        *
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE     *
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER          *
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,   *
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE   *
 * SOFTWARE.                                                                       *
 **********************************************************************************/
/**
 * @return array
 *
 * implements hook hook_menu()
 * builds the menu tabs for the site, both in the admin bar and in the page overlay.
 *
 */
function commerce_fulfilment_menu() {
    $items = array();

    /**
     * Creates the commerce fulfilment link
     */
    $items['admin/commerce/orders/%commerce_order/commerce_fulfilment'] = array(
        'title' => 'Fulfilment',
        'page callback' => 'commerce_fulfilment_package_content',
        'page arguments' => array(3),
        'access callback' => 'commerce_order_access',
        'access arguments' => array('update', 3),
        'type' => MENU_LOCAL_TASK,
        'weight' => 50
    );
    $items['admin/commerce/orders/%commerce_order/commerce_fulfilment/admin'] = array(
        'title'=> 'Admin Options',
        'page callback' => 'commerce_fulfilment_admin_content',
        'page arguments' => array(3),
        'access callback' => 'commerce_order_access',
        'access arguments' => array('update', 3),
        'access callback' => true,
        'type' => MENU_LOCAL_TASK,
        'weight' => 51
    );
    /**
     * creates link to the package page
     */
    $items['admin/commerce/orders/%commerce_order/commerce_fulfilment/orders'] = array(
        'title' => 'Packages',
        'page callback' => 'commerce_fulfilment_package_content',
        'page arguments' => array(3),
        'access callback' => 'commerce_order_access',
        'access arguments' => array('update', 3),
        'type' => MENU_LOCAL_TASK,
        'weight' => -7,
        'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    );

    /**
     * Creates link to the shipment page.
     */
    $items['admin/commerce/orders/%commerce_order/commerce_fulfilment/shipments'] = array(
        'title' => t('Shipments'),
        'page callback' => 'commerce_fulfilment_shipment_content',
        'page arguments' => array(3),
        'access callback' => 'commerce_order_access',
        'access arguments' => array('update', 3),
        'type' => MENU_LOCAL_TASK,
        'weight' => 0,
    );
    return $items;
}
/**
 * @return mixed
 * implements the landing page.
 * Prints the landing form
 */
function commerce_fulfilment_landing_content(){
    $output = '';
    $output .= drupal_render(drupal_get_form('commerce_fulfilment_landing_form'));
    return $output;
}

/**
 * @return mixed
 * implements admin page.
 * prints admin form
 * Also shows menu tabs for navigation.
 */
function commerce_fulfilment_admin_content(){
    $output = '';
    $output .= drupal_render(drupal_get_form('commerce_fulfilment_admin_form'));
    return $output;
}
/**
 * @param $order
 * @return string
 *
 * Builds the package page.
 * Pulls in Order info and displays the name of the products in Order 4.
 *
 */
function commerce_fulfilment_package_content($order)
{
    $order_id = (string)$order->order_id;
    //dpm($order);
    $line_id = $order->commerce_line_items['und'];
    //dpm($line_id);
    $products = commerce_product_load_multiple($line_id);
    //dpm($products);
    $packages = entity_load('package', FALSE, array('order_id'=>$order_id));
    //dpm($packages);
    $output = '<table><tr><td style = vertical-align:top>';
    $output .= '<h2>' . t('Products in order:') . '</h2>';
    foreach ($products as $product) {
        $output .= '<p><strong>Product ID: </strong>' . (string)$product->product_id . '</p><p><strong>Product Name: </strong>' . (string)$product->sku . '</p>';
    }
    $output .= '</td><td style = vertical-align:top><h2>Created Packages for This Order:</h2>';
    foreach ($packages as $package) {
        $package_id = (string)$package->package_id;
        $output .= '<h3>Package ' . $package_id . ':</h3>';
        $output .= '<h4>Products in Package:</h4>';
        $line_items = $package->line_items;
        $line_items = commerce_product_load_multiple($line_items);
        foreach($line_items as $lineitem){
            $output .= '<p><strong>Product ID: </strong>' . (string)$lineitem->product_id . '</p><p><strong>Product Code: </strong>' . (string)$lineitem->sku . '</p>';
        }
        $output .= drupal_render(drupal_get_form('commerce_fulfilment_add_product_form_' . $package_id, array('0' => $package, '1' => $order)));
    }
    $output.='</td></tr></table>';
    $output .= drupal_render(drupal_get_form('commerce_fulfilment_create_package_form', $order));
    return $output;
}
/**
 * implements hook_form
 */
function commerce_fulfilment_create_package_form($form, &$form_state,$order){
    //dpm($order);
    $form = array();
    $form['order'] = array(
        '#type' => 'hidden',
        '#value' => $order,
    );
    $form['title'] = array(
        '#markup'=>'<h2>Create a New Package:</h2>'
    );
    $form['box_type'] = array(
        '#type' => 'select',
        '#title' => 'Select box type: ',
        '#options' => array('large', 'medium', 'small', 'tiny')
    );
    $form['create'] = array(
        '#type' => 'submit',
        '#value' => t('Create a Package')
    );
    return $form;
}
/**
 * implements hook_form_submit()
 */
function commerce_fulfilment_create_package_form_submit($form, &$form_state){
    $order = $form_state['values']['order'];
    $shippings = $order->commerce_customer_shipping['und'][0];
    $shipping = commerce_customer_profile_load($shippings);
    $entity_type = 'package';
    $entity = entity_create($entity_type, array(
        'order_id'=>(string)$order->order_id,
        'box_type'=>(string)$form_state['values']['box_type'],
        'shipping_info'=>array(
            'firstName' => substr($shipping->commerce_customer_address['und'][0]['first_name'], 0, 50),
            'lastName' => substr($shipping->commerce_customer_address['und'][0]['last_name'], 0, 50),
            'company' => substr($shipping->commerce_customer_address['und'][0]['organisation_name'], 0, 50),
            'address' => substr($shipping->commerce_customer_address['und'][0]['thoroughfare'], 0, 60),
            'city' => substr($shipping->commerce_customer_address['und'][0]['locality'], 0, 40),
            'state' => substr($shipping->commerce_customer_address['und'][0]['administrative_area'], 0, 40),
            'zip' => substr($shipping->commerce_customer_address['und'][0]['postal_code'], 0, 20),
            'country' => $shipping->commerce_customer_address['und'][0]['country'],
        ),
    ));
    $entity->save('package', $entity);
}

/**
 * @param $form_id
 * @param $args
 * @return array
 *
 * implements hook_forms
 * Allows for multiple forms to be applied to each page, each with their separate id and submit button.
 */
function commerce_fulfilment_forms($form_id, $args){
    $forms = array();
    $forms[$form_id] = array(
        'callback' => 'commerce_fulfilment_add_product_form_builder',
        'callback arguments' => $args,
    );
    return $forms;
}
/**
 * @param $form
 * @param $form_state
 * @param $package
 * @param $order
 * @return form
 *
 * implements hook hook_form
 * Adds the select box and add button to the packages interface.
 */
function commerce_fulfilment_add_product_form_builder($form, &$form_state, $args){
    $package = $args[0];
    $order = $args[1];
    $arr = array();
    $count = 0;
    $products = $order->commerce_line_items['und'];
    $products = commerce_product_load_multiple($products);
    foreach($products as $product){
        $arr[$count] = (string)$product->product_id;
        $count = $count + 1;
    }

    $form = array();
    $form['package'] = array(
        '#type' => 'hidden',
        '#value' => $package,
    );
    $form['order'] = array(
        '#type' => 'hidden',
        '#value' => $order,
    );
    $form['product'] = array(
        '#type' => 'select',
        '#title' => 'Select Product to Add: ',
        '#options' => commerce_fulfilment_get_package_array($order),
    );
    $form['add'] = array(
        '#type' => 'submit',
        '#value' => t('Add Product')
    );
    $form['#submit'][] = 'commerce_fulfilment_add_product_form_submit';
    return $form;
}
/**
 * loads an array of line item id's.
 * If there is no index chosen, Returns the array.
 * If there is an index chosen. Returns the data in the array at that index.
 */
function commerce_fulfilment_get_package_array($order, $index = FALSE)
{

    $line_ids = $order->commerce_line_items['und'];
    //dpm($line_ids);
    $line_id = array();
    $count = 0;
    /**
     * Creates an array of order id's for the select box.
     */
    foreach ($line_ids as $id) {
        $line_id[$count] = (string)$id['line_item_id'];
        $count++;
    }
    if($index !== FALSE && is_int($index) && $index <= count($line_ids))
    {
        return $line_id[$index];
    }
    return $line_id;
}
/**
 * @param $form
 * @param $formstate
 * implement hook hook_form_submit
 * Implements the functionality behind commerce_fulfilment_add_product_form
 *
 */
function commerce_fulfilment_add_product_form_submit($form, &$form_state)
{

    $package = $form_state['values']['package'];
    $order = $form_state['values']['order'];
    $argument = (string)commerce_fulfilment_get_package_array($order, (int)$form_state['values']['product']);
    $package->line_items['und'][] = $argument;
    $package->save('package', $package);
}
/**
 * @return string
 *
 * Builds the shipments page
 *
 */
function commerce_fulfilment_shipment_content() {
    return '<h2>'.t('Shipments info').'</h2>';
}
/**
 * loads an array of order objects.
 * If there is no index chosen, Returns the array.
 * If there is an index chosen. Returns the data in the array at that index.
 */
function commerce_fulfilment_get_order_array($index = FALSE)
{
    $orders = commerce_order_load_multiple(array(), array('status' => 'pending'));
    $order_id = array();
    $count = 0;
    /**
     * Creates an array of order id's for the select box.
     */
    foreach ($orders as $order) {
        $order_id[$count] = (string)$order->order_number;
        $count++;
    }

    if($index !== FALSE && is_int($index) && $index <= count($order_id))
    {
        return $order_id[$index];
    }
    return $order_id;
}
/**
 * @return array
 * Implements hook hook_menu
 * A form for the user to select which order they would like to see.
 */
function commerce_fulfilment_landing_form($form, &$form_state)
{

    $form = array();
    $form['title'] = array(
        '#markup' => '<h2>Commerce Fulfilment:</h2>'
    );
    $form['select'] = array(
        '#type' => 'select',
        '#title' => t("Choose from list of pending orders:"),
        '#options' => commerce_fulfilment_get_order_array()
    );
    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Submit')
    );
    return $form;
}
/*
 * @param $form
 * @param $form_state
 * Implements hook_form_submit().
 * Gets the value of the index selected by the select form, then redirects to the
 * admin/commerce/manage-orders/$arguments/orders page.
 */
function commerce_fulfilment_landing_form_submit($form,&$form_state){
    $argument = commerce_fulfilment_get_order_array((int)$form_state['values']['select']);
    $form_state['redirect'] = 'admin/commerce/orders/actions/manage-orders/commerce_fulfilment/' .$argument.'/orders';
}
/**
 *
 * @return array
 * Implements hook_form
 * Creates an admin page form
 * Will use this data to print packing slips and shipping labels
 */
function commerce_fulfilment_admin_form(){
    $form = array();
    $form['title'] = array(
        '#markup' => '<h2>Admin Page</h2>'
    );
    /**
     * Creates seperate information fields
     */
    $form['Company Information']=array(
        '#type'=>'fieldset',
        '#title'=>t("Enter your company's information below"),
        '#description'=>'Enter information to use on Packing Slips and Shipping Labels.'
    );
    /**
     * Textfields
     */
    $form['Company Information']['company'] = array(
        '#type'=>'textfield',
        '#title'=>t('Company name:'),
    );
    $form['Company Information']['address'] = array(
        '#type'=>'textfield',
        '#title'=>t('Address:')
    );
    $form['Company Information']['phone'] = array(
        '#type'=>'textfield',
        '#title'=>t('Company Phone Number:')
    );
    /**
     * Allows user to upload company logo
     */
    $form['#attributes']['enctype'] = 'multipart/form-data';

    $form['Company Information']['logo']=array(
        '#type'=>'file',
        '#title'=>t('Upload your company logo:'),
    );
    /**
     * Submit button
     */
    $form['submit']=array(
        '#type'=>'submit',
        '#value'=>t('Submit')
    );
    return $form;
}
/**
 * Implements hook hook_form_validate
 * Validates information entered into the form
 */
function commerce_fulfilment_admin_form_validate($form, &$form_state){
    if(empty($form_state['values']['company']))
        form_set_error('company','Company cannot be empty');
    if(empty($form_state['values']['address']))
        form_set_error('address','Address cannot be empty');
    if(empty($form_state['values']['phone']))
        form_set_error('phone','Phone cannot be empty');
}

/**
 * @param $form
 * @param $form_state
 *
 * Allows the form to submit its information and display a message.
 *
 */
function commerce_fulfilment_admin_form_submit($form, &$form_state){
    drupal_set_message('Form has been submitted');
}
/**
 * Implements hook_entity_info()
 */
/////////////////Package Entity////////////////
function commerce_fulfilment_entity_info(){
    $info = array();
    $info['package'] = array(
        'label' => t('package'),
        'base table' => 'commerce_fulfilment_packages',
        'entity keys' => array(
            'id' => 'package_id'
        ),
        'uri callback' => 'entity_class_uri',
        'entity class'=> 'packageEntity',
        'controller class' =>'packageEntityController',
        'fieldable' => true,
        'module'=>'commerce_fulfilment'
    );
    $info['shipment'] = array(
        'label' => t('shipment'),
        'base_table' => 'commerce_fulfilment_shipments',
        'entity keys' => array(
            'id' => 'shipment_id',
        ),
        'entity class'=> 'shipmentEntity',
        'controller class' =>'shipmentEntityController',
        'fieldable' => true,
        'module'=>'commerce_fulfilment'
    );
    return $info;
}
class shipmentEntityController extends EntityAPIController{

}
class shipmentEntity extends Entity{

}
class packageEntityController extends EntityAPIController{

}
class packageEntity extends Entity{

}
