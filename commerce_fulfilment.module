<?php
/**
 * @return array
 *
 * implements hook hook_menu()
 * builds the menu tabs for the site, both in the admin bar and in the page overlay.
 *
 */
function commerce_fulfilment_menu() {
  $items = array();

  //Creates the commerce fulfilment link

  $items['admin/commerce/orders/%commerce_order/commerce_fulfilment'] = array(
    'title' => 'Fulfilment',
    'page callback' => 'commerce_fulfilment_package_content',
    'page arguments' => array(3),
    'access callback' => 'commerce_order_access',
    'access arguments' => array('update', 3),
    'type' => MENU_LOCAL_TASK,
    'weight' => 50
  );
  $items['admin/commerce/orders/%commerce_order/commerce_fulfilment/admin'] = array(
    'title'=> 'Admin Options',
    'page callback' => 'commerce_fulfilment_admin_content',
    'page arguments' => array(3),
    'access callback' => 'commerce_order_access',
    'access arguments' => array('update', 3),
    'access callback' => true,
    'type' => MENU_LOCAL_TASK,
    'weight' => 51
  );

  //creates link to the package page

  $items['admin/commerce/orders/%commerce_order/commerce_fulfilment/orders'] = array(
    'title' => 'Packages',
    'page callback' => 'commerce_fulfilment_package_content',
    'page arguments' => array(3),
    'access callback' => 'commerce_order_access',
    'access arguments' => array('update', 3),
    'type' => MENU_LOCAL_TASK,
    'weight' => -7,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );


  //Creates link to the shipment page.

  $items['admin/commerce/orders/%commerce_order/commerce_fulfilment/shipments'] = array(
    'title' => 'Shipments',
    'page callback' => 'commerce_fulfilment_shipment_content',
    'page arguments' => array(3),
    'access callback' => 'commerce_order_access',
    'access arguments' => array('update', 3),
    'type' => MENU_LOCAL_TASK,
    'weight' => 0,
  );
  $items['admin/commerce/orders/%/commerce_fulfilment/%/shipping_label'] = array(
    'title' => 'Shipping Label',
    'page callback' => 'commerce_fulfilment_shipping_label_content',
    'page arguments' => array(5),
    'access callback' => true,
    'type' => MENU_CALLBACK,
  );
  $items['admin/commerce/orders/%/commerce_fulfilment/%/packing_slip'] = array(
    'title' => 'Packing Slip',
    'page callback' => 'commerce_fulfilment_packing_slip_content',
    'page arguments' => array(5),
    'access callback' => true,
    'type' => MENU_CALLBACK,
  );
  return $items;
}
/**
 * @return mixed
 * implements admin page.
 * prints admin form
 * Also shows menu tabs for navigation.
 */
function commerce_fulfilment_admin_content(){

  $get_form = drupal_get_form('commerce_fulfilment_admin_form');
  return drupal_render($get_form);

}
/**
 * @param $order
 * @return string
 *
 * Builds the package page.
 * Pulls in Order info and displays the name of the products in chosen Order.
 *
 */
function commerce_fulfilment_package_content($order){

  $order_id = $order->order_id;
  //dpm($order);
  $packages = entity_load('package', FALSE, array('order_id'=>$order_id));
  //dpm($packages);
  $output = '<table><tr><td style = vertical-align:top>';
  $output .= '<h2>' . t('Products in Order ' .$order_id . ':') . '</h2>';
  $output .= views_embed_view('commerce_fulfilment_order', 'order_block', $order_id);
  $output .= '</td><td style = vertical-align:top><h2>Created Packages for This Order:</h2>';
  foreach ($packages as $package) {
    $output .= '<h3>Package ' . $package->package_id . ':</h3>';
    $output .= '<h4>Products in Package:</h4>';
    dpm($package);
    $line_items = commerce_line_item_load_multiple($package->line_items['und']);
    foreach ($line_items as $line_item) {
      $output .= '<p><strong>Product ID: </strong>' . $line_item->line_item_id . '</p><p><strong>Product Code: </strong>' . $line_item->line_item_label . '</p>';
    }
    $get_form = drupal_get_form('commerce_fulfilment_add_product_form_' . $package->package_id, array('0' => $package->package_id, '1' => $order->order_id));
    $output .= drupal_render($get_form);
  }
  $output.='</td></tr><tr>';
  $get_form = drupal_get_form('commerce_fulfilment_create_package_form', $order_id);
  $output .= '<td>' . drupal_render($get_form) . '</td>';
  $get_form = drupal_get_form('commerce_fulfilment_packing_slip_form', $order_id);
  $output .= '<td>' . drupal_render($get_form) . '</td>';
  $output .= '</tr></table>';
  return $output;
}

/**
 * @param $form
 * @param $form_state
 * @param $order
 * @return array
 *
 * implements hook_form
 * adds functionality to create a package
 *
 */
function commerce_fulfilment_create_package_form($form, &$form_state,$order_id){
  //dpm($order);

  $form = array();
  $form['commerce_fulfilment_order_id'] = array(
    '#type' => 'hidden',
    '#value' => $order_id,
  );
  $form['commerce_fulfilment_title'] = array(
    '#markup'=>'<h2>Create a New Package:</h2>'
  );
  $form['commerce_fulfilment_package_type'] = array(
    '#type' => 'select',
    '#title' => 'Select package type: ',
    '#options' => array(variable_get("commerce_fulfilment_boxtype", NULL)),
    '#default_value' => 'default',
  );
  $form['commerce_fulfilment_create'] = array(
    '#type' => 'submit',
    '#value' => t('Create a Package')
  );
  return $form;
}

/**
 * @param $form
 * @param $form_state
 *
 * implements hook_form_submit
 */
function commerce_fulfilment_create_package_form_submit($form, &$form_state){

  //create an order entity wrapper
  $order_id = $form_state['values']['commerce_fulfilment_order_id'];
  $order = commerce_order_load($order_id);
  $order_wrapper= entity_metadata_wrapper('commerce_order', $order);
  //create a package entity wrapper
  $profile_id = $order_wrapper->commerce_customer_billing->profile_id->value();
  $profile = commerce_customer_profile_load($profile_id);
  $profile_wrapper = entity_metadata_wrapper('commerce_customer_profile', $profile);

  //create the package entity
  $entity = entity_create('package', array(
    'order_id' => $order_wrapper->order_id->value(),
    'box_type' => $form_state['values']['commerce_fulfilment_package_type'],
    'shipping_info'=>array(
      'firstName' => $profile_wrapper->commerce_customer_address->first_name->value(),
      'lastName' => $profile_wrapper->commerce_customer_address->last_name->value(),
      'company' => $profile_wrapper->commerce_customer_address->organisation_name->value(),
      'address' => $profile_wrapper->commerce_customer_address->thoroughfare->value(),
      'city' => $profile_wrapper->commerce_customer_address->locality->value(),
      'state' => $profile_wrapper->commerce_customer_address->administrative_area->value(),
      'zip' => $profile_wrapper->commerce_customer_address->postal_code->value(),
      'country' => $profile_wrapper->commerce_customer_address->country->value(),
    ),
  ));

  //insert entity into database
  $entity->save('package', $entity);

}
/**
 * @param $form_id
 * @param $args
 * @return array
 *
 * implements hook_forms
 * Allows for multiple forms to be applied to each page, each with their separate id and submit button.
 */
function commerce_fulfilment_forms($form_id, $args){
  $forms = array();
  if (strpos($form_id, 'commerce_fulfilment_add_product_form_') !== FALSE) {
    $forms[$form_id] = array(
      'callback' => 'commerce_fulfilment_add_product_form_builder',
      'callback arguments' => $args,
    );
  }
  if (strpos($form_id, 'commerce_fulfilment_add_package_form_') !== FALSE) {
    $forms[$form_id] = array(
      'callback' => 'commerce_fulfilment_add_package_form_builder',
      'callback arguments' => $args,
    );
  }
  return $forms;
}
/**
 * @param $form
 * @param $form_state
 * @return array
 *
 * implements hook hook_form
 * Adds the select box and add button to the packages interface.
 */
function commerce_fulfilment_add_product_form_builder($form, &$form_state, $args){
  $package_id = $args[0];
  $order_id = $args[1];
  $form = array();
  $options = array(0 => t('Add Product'),1 => t('Remove Product'), 2 => t('Delete Package'));
  $form['commerce_fulfilment_package_id'] = array(
    '#type' => 'hidden',
    '#value' => $package_id,
  );
  $form['commerce_fulfilment_order_id'] = array(
    '#type' => 'hidden',
    '#value' => $order_id,
  );
  $form['commerce_fulfilment_product'] = array(
    '#type' => 'select',
    '#title' => 'Select Product to Add: ',
    '#options' => commerce_fulfilment_get_product_array($order_id),
  );
  $form['commerce_fulfilment_radios'] = array(
    '#type' => 'radios',
    '#title'=>t('Options'),
    '#default value' => $options[0],
    '#options' => $options
  );
  $form['commerce_fulfilment_add'] = array(
    '#type' => 'submit',
    '#value' => t('Submit')
  );
  $form['#submit'][] = 'commerce_fulfilment_add_product_form_submit';
  return $form;
}
/**
 * @param $order_id
 * @param $product
 *
 * @return array
 *
 * loads an array of line item id's.
 * If there is no index chosen, Returns the array.
 * If there is an index chosen. Returns the data in the array at that index.
 */
function commerce_fulfilment_get_product_array($order_id, $product = FALSE){
  $order = commerce_order_load($order_id);
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $line_ids = array();

  foreach($order_wrapper->commerce_line_items->value() as $index => $line_item){
    $line_ids[] = $line_item->line_item_id;
  }

  if($product !== FALSE && is_int($product) && $product <= count($line_ids)) {
    return $line_ids[$product];
  }
  return $line_ids;
}
/**
 * @param $form
 * @param $form_state
 * implement hook hook_form_submit
 * Implements the functionality behind commerce_fulfilment_add_product_form
 *
 */
function commerce_fulfilment_add_product_form_submit($form, &$form_state){
  $order_id = $form_state['values']['commerce_fulfilment_order_id'];
  $package_id[0] = $form_state['values']['commerce_fulfilment_package_id'];

  $package = entity_load('package', $package_id, array('order_id' => $order_id));
  $package_wrapper = entity_metadata_wrapper('package', $package[$package_id[0]]);

  $products = array();
  foreach($package_wrapper->line_items->value() as $line_item){
    $products[] = $line_item;
  }
  dpm($products);

  $argument = commerce_fulfilment_get_product_array($order_id, (int)$form_state['values']['commerce_fulfilment_product']);

  if($form_state['values']['commerce_fulfilment_radios'] == 0) {

    $package[$package_id[0]]->line_items['und'][] = $argument;
    $package[$package_id[0]]->save('package', $package);
  }
  elseif($form_state['values']['commerce_fulfilment_radios'] == 1) {
    $count = 0;
    foreach ($products as $product) {
      if ($product == $argument) {
        $package[$package_id[0]]->line_items['und'][$count] = NULL;
        $package[$package_id[0]]->save('package', $package);
      }
      $count++;
    }
  }
  elseif($form_state['values']['commerce_fulfilment_radios']==2){
    $package[$package_id[0]]->delete();
  }
}

/**
 * @param $form
 * @param $form_state
 * @param $order_id
 * @return array
 *
 * Implements hook_form
 * Shows form for printing packing slips
 */
function commerce_fulfilment_packing_slip_form($form, $form_state, $order_id){
  $package_arr['und'] = entity_load('package', FALSE, array('order_id' => $order_id));
  $form = array();
  $form['commerce_fulfilment_order_id'] = array(
    '#type' => 'hidden',
    '#value' => $order_id,
  );
  $form['commerce_fulfilment_title'] = array(
    '#markup'=>'<h2>Print Packing Slip:</h2>'
  );
  $form['commerce_fulfilment_package'] = array(
    '#type' => 'select',
    '#title' => 'Select Package:',
    '#options' => commerce_fulfilment_get_package_array($package_arr),
  );
  $form['commerce_fulfilment_print'] = array(
    '#type' => 'submit',
    '#value' => t('Print Packing Slip')
  );
  return $form;
}

/**
 * @param $form
 * @param $form_state
 * redirects the user to the packing slip
 */
function commerce_fulfilment_packing_slip_form_submit($form, &$form_state){
  $package_arr['und'] = entity_load('package', FALSE, array('order_id' => $form_state['values']['commerce_fulfilment_order_id']));
  $argument = commerce_fulfilment_get_package_array($package_arr, (int)$form_state['values']['commerce_fulfilment_package']);

  $form_state['redirect'] = 'admin/commerce/orders/' . $form_state['values']['commerce_fulfilment_order_id'] .'/commerce_fulfilment/' . $argument . '/packing_slip';
}

/**
 * @param $package_id
 *
 * The page to show and print the packing slip
 *
 */
function commerce_fulfilment_packing_slip_content($package_id){
  $package_selected = entity_load('package', FALSE, array('package_id' => $package_id));
  $order_id = $package_selected[$package_id]->order_id;
  $packages = entity_load('package', FALSE, array('order_id' => $order_id));
  $products = commerce_line_item_load_multiple($package_selected[$package_id]->line_items['und']);
  $count = 0;
  foreach($packages as $package){
    $count++;
  }
  $image = variable_get('logo', NULL);
  $image_obj = file_load_multiple($image);
  $image_obj_url = file_create_url($image_obj->uri);
  $output = '<table width = "700" border = "1"><tr><td width = "20%"><img src = "'. $image_obj_url .'"></td>';
  $output .= '<td width = "80%"><p></p><strong>Company Info.: <br></strong>'. variable_get('company') .'</p>' . variable_get('address') .
    '<br>' . variable_get('phone', NULL) . '</td></tr><tr><td style = vertical-align:top align = "top" height = "500" colspan ="2">
        <table cellpadding = "15" width = "700" >';
  $output .= '<th align = "left"> Product Code:</th><th align = "left"> Quantity</th><th align = "left"> Unit Price:</th><th align = "left"> Total Price:</th>';
  foreach($products as $product){
    $prices[0] = $product->commerce_unit_price['und'][0]['amount'];
    $prices[1] = $product->commerce_total['und'][0]['amount'];

    $length = strlen($prices[0]);
    $prices[0] = substr_replace($prices[0], '.', $length - 2, 0);
    $length = strlen($prices[1]);
    $prices[1] = substr_replace($prices[1], '.', $length - 2, 0);

    $output .= '<tr><td>' . $product->line_item_label . '</td><td>' . $product->quantity .'</td><td>' .
      $prices[0] . ' ' . $product->commerce_unit_price['und'][0]['currency_code'] . '</td><td>' . $prices[1] . ' '
      . $product->commerce_total['und'][0]['currency_code'] . '</td></tr>';
  }
  $output .= '</table></td></tr>';
  $output .= '<tr><td colspan = "2"><strong>Package ID: </strong>' . $package_selected[$package_id]->package_id . '<br><strong>Package:</strong> 1 of ' . $count . '</td>';
  $output.= '</tr></table>';
  print $output;
}
/**
 * @return string
 *
 * Builds the shipments page
 *
 */
function commerce_fulfilment_shipment_content($order) {

  $order_id = $order->order_id;
  //dpm($order);
  $packages = entity_load('package', FALSE, array('order_id'=>$order_id));
  $packages_id = array();
  $shipments = entity_load('shipment', FALSE, array('order_num'=>$order_id));
  //dpm($packages);
  $output = '<table border = "0"><tr><td style = vertical-align:top><h2>Created Packages for This Order:</h2>';
  foreach ($packages as $package) {
    $package_id = $package->package_id;
    $packages_id[] = $package->package_id;
    $output .= '<h3>Package ' . $package_id . ':</h3>';
    $output .= '<h4>Products in Package:</h4>';
    $line_items = $package->line_items;
    $line_items = commerce_line_item_load_multiple($line_items['und']);
    foreach ($line_items as $line_item) {
      $output .= '<p><strong>Product ID: </strong>' .$line_item->line_item_id . '</p><p><strong>Product Code: </strong>' . $line_item->line_item_label . '</p>';
    }
  }
  $output .= '</td><td style = vertical-align:top><h2>Created Packages for This Order:</h2>';
  foreach ($shipments as $shipment) {
    $shipment_id = $shipment->shipment_id;
    $output .= '<h3>Shipment ' . $shipment_id . ':</h3>';
    $output .= '<h4>Packages in Shipment:</h4>';
    $package_ids = $shipment->package_num['und'];
    if($package_ids != NULL) {
      foreach ($package_ids as $package_id) {
        if ($package_id != NULL) {
          $package = entity_load('package', FALSE, array('package_id' => $package_id));
          $output .= '<p><strong>Package ID: </strong>' . $package[$package_id]->package_id . '</p><p><strong>Shipping Info: </strong>' . $package[$package_id]->shipping_info['address'] . '</p>';
        }
      }
    }
    $args = array($shipment_id);
    $get_form = (drupal_get_form('commerce_fulfilment_add_package_form_' . $shipment_id, $args));
    $output .= drupal_render($get_form);
  }
  $output .= '</td></tr><tr><td>';
  $get_form = drupal_get_form('commerce_fulfilment_create_shipment_form', $order_id);
  $output .= drupal_render($get_form) . '</td>';
  $get_form = drupal_get_form('commerce_fulfilment_shipping_label_print_form', $order_id);
  $output .= '<td>' . drupal_render($get_form) . '</td></tr></table>';

  return $output;
}
/**
 * @param $form
 * @param $form_state
 * @return array
 *
 * implements hook hook_form
 * Adds the select box and add button to the packages interface.
 */
function commerce_fulfilment_add_package_form_builder($form, &$form_state, $args){
  $options = array(0 => t('Add Package'),1 => t('Remove Package'), 2 => t('Delete Shipment'));
  $shipment_id = $args[0];
  $shipment = entity_load('shipment', FALSE, array('shipment_id'=>$shipment_id));
//    dpm($shipment);
  $order_id = $shipment[$shipment_id]->order_num;
  $package_arr['und'] = entity_load('package', FALSE, array('order_id' => $order_id));
  //dpm($package_arr);
  $form['commerce_fulfilment_order_id'] = array(
    '#type' => 'hidden',
    '#value' => $order_id,
  );
  //dpm($package_arr);
  $form['commerce_fulfilment_shipment_id'] = array(
    '#type' => 'hidden',
    '#value' => $shipment_id,
  );
  $form['commerce_fulfilment_package'] = array(
    '#type' => 'select',
    '#title' => 'Select Package: ',
    '#options' => commerce_fulfilment_get_package_array($package_arr),
  );
  $form['commerce_fulfilment_radios'] = array(
    '#type' => 'radios',
    '#title'=>t('Options'),
    '#default value' => $options[0],
    '#options' => $options
  );
  $form['commerce_fulfilment_add'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  $form['#submit'][] = 'commerce_fulfilment_add_package_form_submit';
  return $form;
}

/**
 * @param $form
 * @param $form_state
 * @param $order_id
 * @return array
 * implements hook form
 * implements functionality to select which shipment to print shipping labels for.
 *
 */
function commerce_fulfilment_shipping_label_print_form($form, &$form_state, $order_id){
  $shipment_arr['und'] = entity_load('shipment', FALSE, array('order_num' => $order_id));
  //dpm($shipment_arr);
  $form = array();
  $form['commerce_fulfilment_order_id'] = array(
    '#type' => 'hidden',
    '#value' => $order_id,
  );
  $form['commerce_fulfilment_title'] = array(
    '#markup'=>'<h2>Print Shipping Label:</h2>'
  );
  $form['commerce_fulfilment_shipment'] = array(
    '#type' => 'select',
    '#title' => 'Select Shipment:',
    '#options' => commerce_fulfilment_get_shipment_array($shipment_arr),
  );
  $form['commerce_fulfilment_print'] = array(
    '#type' => 'submit',
    '#value' => t('Print Shipping Label')
  );
  return $form;
}

/**
 * @param $form
 * @param $form_state
 * redirects the user to the shipping label page
 */
function commerce_fulfilment_shipping_label_print_form_submit($form, &$form_state){
  $order_id = $form_state['values']['commerce_fulfilment_order_id'];
  $shipment_arr['und'] = entity_load('shipment', FALSE, array('order_num' => $order_id));
  $argument = commerce_fulfilment_get_shipment_array($shipment_arr, (int)$form_state['values']['commerce_fulfilment_shipment']);
  $form_state['redirect'] = 'admin/commerce/orders/' . $order_id .'/commerce_fulfilment/' . $argument . '/shipping_label';
}

/**
 * @param $shipment_id
 * @return string
 *
 * Prints the shipping label on its own page. Takes in the shipment_id and loads the shipment.
 * Prints Company name, address, phone # and logo from the administrator page.
 *
 */
function commerce_fulfilment_shipping_label_content($shipment_id){
  $shipment_arr = entity_load('shipment', FALSE, array(shipment_id => $shipment_id));
  $shipment = $shipment_arr[$shipment_id];
  $image = variable_get('logo', NULL);
  $image_obj = file_load($image);
  $image_obj_url = file_create_url($image_obj->uri);
  $output = '<table border = "1px solid black" height = "350" width = "700"><tr><td height = "50%"><strong> From: </Strong>' . variable_get('company', NULL) . '<br>'
    . variable_get('address', NULL) . '<br>' . variable_get('phone', NULL) . '</td>';
  $output .= '<td align = "center"><img src = "' . $image_obj_url .  '")></td></tr>';
  $output .= '<tr><td height = "50%"><strong>To: </strong>' . $shipment->shipping_info['firstName'] . ' ' . $shipment->shipping_info['lastName'] . '<br>'
    . $shipment->shipping_info['address'] . '<br>' . $shipment->shipping_info['city'] . ', '
    . $shipment->shipping_info['state'] . ', ' . $shipment->shipping_info['country'] . '<br>'
    . $shipment->shipping_info['zip'] . '</td>';
  $output .= '<td width = "50%"><strong>Order ID: </strong>' . $shipment->order_num . '<br><strong>Tracking Number:
        </strong>' . $shipment->tracking_number . '<br><strong>Shipping Method: </strong>' . $shipment->method['method']
    . '<br>' . '</tr></table>';
  print $output;
}
/**
 * @param $shipments
 * @param bool $index
 * @return array
 * returns an array of shipment ids if there is no index.
 * If there is an index returns the selected shipment ID
 *
 */
function commerce_fulfilment_get_shipment_array($shipments, $index = FALSE) {
  $shipments = $shipments['und'];
  $shipment_id = array();
  $count = 0;

  //Creates an array of package id's for the select box.

  foreach ($shipments as $shipment) {
    $shipment_id[$count] = $shipment->shipment_id;
    $count++;
  }
  if($index !== FALSE && is_int($index) && $index <= count($shipment_id)) {
    return $shipment_id[$index];
  }
  return $shipment_id;
}
/**
 * @param $packages
 * @param bool $index
 * @return array
 * Gets an array of package_ids to display in the commerce_fulfilment_add_package_form_builder
 */
function commerce_fulfilment_get_package_array($packages, $index = FALSE){
  $packages = $packages['und'];
  $package_id = array();
  $count = 0;

  //Creates an array of package id's for the select box.

  foreach ($packages as $package) {
    $package_id[$count] = $package->package_id;
    $count++;
  }
  if($index !== FALSE && is_int($index) && $index <= count($package_id)) {
    return $package_id[$index];
  }
  return $package_id;
}

/**
 * @param $form
 * @param $form_state
 *
 * Implements hook_form_submit,
 * Places a package into a shipment
 */
function commerce_fulfilment_add_package_form_submit(&$form, &$form_state){
  //loads shipment
  $shipment_id = $form_state['values']['commerce_fulfilment_shipment_id'];
  $shipment = entity_load('shipment', FALSE, array('shipment_id'=>$shipment_id));

  //loads an array of package entities in the shipment
  $order_id = $form_state['values']['commerce_fulfilment_order_id'];
  $package_arr['und'] = entity_load('package', FALSE, array('order_id' => $order_id));
  $package_id = (int)$form_state['values']['commerce_fulfilment_package'];

  //gets the argument to add/remove from the shipment
  $arg = commerce_fulfilment_get_package_array($package_arr , $package_id);

  //checks if there is a package with the argument ID
  $package = $package_arr['und'][$arg];
  $package_ids = $shipment[$shipment_id]->package_num['und'];
  $package_id = $package->package_id;

  if($form_state['values']['commerce_fulfilment_radios'] == 0 ) {
    $count = 0;
    if(isset($package_ids)) {
      foreach ($package_ids as $pack_id) {
        if ($pack_id == $arg) {
          $count++;
        }
      }
    }
    if($count == 0) {
      $shipment[$shipment_id]->package_num['und'][] = $package_id;
      $shipment[$shipment_id]->save('shipment', $shipment);
    }
    else{
      drupal_set_message('Package ' . $arg . ' is already in Shipment ' . $shipment_id . '.');
    }
  }
  elseif($form_state['values']['commerce_fulfilment_radios'] == 1) {
    $success_count = 0;
    for($counting = count($package_ids)-1; $counting>=0; $counting--) {

      if ($shipment[$shipment_id]->package_num['und'][$counting] == $package_id) {
        $shipment[$shipment_id]->package_num['und'][$counting] = NULL;
        $shipment[$shipment_id]->save('shipment', $shipment);
        $success_count++;
      }
    }
    if($success_count == 0){
      drupal_set_message('Package ' . $arg . ' was not found in Shipment ' . $shipment_id . '.');
    }
  }
  elseif($form_state['values']['commerce_fulfilment_radios'] == 2){
    $shipment[$shipment_id]->delete();
    drupal_set_message('Shipment ' . $shipment_id . ' deleted.');
  }
}
/**
 * @param $form
 * @param $form_state
 * @param $order_id
 * @return array
 *
 * Implements hook_form
 * Implements form to create a new shipment object
 * Allows user to set the tracking number if desired
 *
 */

function commerce_fulfilment_create_shipment_form($form, &$form_state,$order_id){

  $form = array();
  $form['commerce_fulfilment_order_id'] = array(
    '#type' => 'hidden',
    '#value' => $order_id,
  );
  $form['commerce_fulfilment_title'] = array(
    '#markup'=>'<h2>Create a New Shipment:</h2>'
  );
  $form['commerce_fulfilment_tracking_number'] = array(
    '#type' => 'textfield',
    '#title' => 'Enter tracking number:',
    '#size' => 20,
    '#length' => 255,
    '#required' => false,
  );
  $form['commerce_fulfilment_create'] = array(
    '#type' => 'submit',
    '#value' => t('Create Shipment')
  );
  return $form;
}

function commerce_fulfilment_create_shipment_form_submit(&$form, &$form_state){

  $order_id = $form_state['values']['commerce_fulfilment_order_id'];
  $order = commerce_order_load($order_id);
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $profile = commerce_customer_profile_load($order_wrapper->commerce_customer_shipping->profile_id->value());
  $profile_wrapper = entity_metadata_wrapper('commerce_customer_profile', $profile);
  dpm($order);

  $entity_type = 'shipment';
  $entity = entity_create($entity_type, array(
    'order_num' => $order->order_id,
    'status' => 'pending',
    'packages' => '',
    'dates' => array(
      'created' => date('ymd'),
    ),
    'shipping_info' => array(
      'firstName' => $profile_wrapper->commerce_customer_address->first_name->value(),
      'lastName' => $profile_wrapper->commerce_customer_address->last_name->value(),
      'company' => $profile_wrapper->commerce_customer_address->organisation_name->value(),
      'address' => $profile_wrapper->commerce_customer_address->thoroughfare->value(),
      'city' => $profile_wrapper->commerce_customer_address->locality->value(),
      'state' => $profile_wrapper->commerce_customer_address->administrative_area->value(),
      'zip' => $profile_wrapper->commerce_customer_address->postal_code->value(),
      'country' => $profile_wrapper->commerce_customer_address->country->value(),
    ),
    'tracking_number' => $form_state['values']['commerce_fulfilment_tracking_number'],
  ));
  $entity->save('shipment', $entity);
}
/**
 *
 * @return array
 * Implements hook_form
 * Creates an admin page form
 * Will use this data to print packing slips and shipping labels
 */
function commerce_fulfilment_admin_form(){
  $form = array();
  $form['commerce_fulfilment_title'] = array(
    '#markup' => '<h2>Admin Page</h2>'
  );

  //Creates seperate information fields

  $form['commerce_fulfilment_company_information']=array(
    '#type'=>'fieldset',
    '#title'=>t("Enter your company's information below"),
    '#description'=>'Enter information to use on Packing Slips and Shipping Labels.'
  );

  //Textfields

  $form['commerce_fulfilment_company_information']['commerce_fulfilment_company'] = array(
    '#type'=>'textfield',
    '#title'=>t('Company name:'),
    '#default_value' => variable_get('company', NULL),
    '#required' => TRUE,
  );
  $form['commerce_fulfilment_company_information']['commerce_fulfilment_address'] = array(
    '#type'=>'textfield',
    '#title'=>t('Address:'),
    '#default_value' => variable_get('address', NULL),
    '#required' => TRUE,
  );
  $form['commerce_fulfilment_company_information']['commerce_fulfilment_phone'] = array(
    '#type'=>'textfield',
    '#title'=>t('Company Phone Number:'),
    '#default_value' => variable_get('phone', NULL),
    '#required' => TRUE,
  );
  $form['commerce_fulfilment_company_information']['commerce_fulfilment_boxtype'] = array(
    '#type'=>'textfield',
    '#title'=>t('Add Package Type:'),
  );

  //Allows user to upload company logo

  $form['#attributes']['enctype'] = 'multipart/form-data';

  $form['commerce_fulfilment_company_information']['commerce_fulfilment_logo']=array(
    '#type'=>'managed_file',
    '#title'=>t('Upload your company logo:'),
    '#default_value' => variable_get('logo', NULL),
    '#upload_location' => 'public://logo/'
  );
  return system_settings_form($form);
}
/**
 * Implements hook hook_form_validate
 * Validates information entered into the form
 */
function commerce_fulfilment_admin_form_validate($form, &$form_state){
}

/**
 * @return array
 * implements hook_views_api
 */
function commerce_fulfilment_views_api() {
  return array('api' => 3.0);
}

/**
 * @return mixed
 * implements hook_views_default_views
 */
function commerce_fulfilment_views_default_views() {

  $files = file_scan_directory(drupal_get_path('module', 'commerce_fulfilment') . '/views', '/.*\.inc$/');

  foreach ($files as $filepath => $file) {
    require $filepath;
    if(isset($view)) {
      $views[$view->name] = $view;
    }
  }

  return $views;
}

/**
 * Implements hook_entity_info()
 * Tells the Drupal API about our custom entities.
 */
function commerce_fulfilment_entity_info(){
  $info = array();
  $info['package'] = array(
    'label' => t('package'),
    'base table' => 'commerce_fulfilment_packages',
    'entity keys' => array(
      'id' => 'package_id'
    ),
    'entity class'=> 'packageEntity',
    'controller class' =>'packageEntityController',
    'fieldable' => true,
    'module'=>'commerce_fulfilment'
  );
  $info['shipment'] = array(
    'label' => t('shipment'),
    'base table' => 'commerce_fulfilment_shipments',
    'entity keys' => array(
      'id' => 'shipment_id',
    ),
    'entity class'=> 'shipmentEntity',
    'controller class' =>'shipmentEntityController',
    'fieldable' => true,
    'module'=>'commerce_fulfilment'
  );
  return $info;
}
class shipmentEntityController extends EntityAPIController{

}
class shipmentEntity extends Entity{

}
class packageEntityController extends EntityAPIController{

}
class packageEntity extends Entity{

}
