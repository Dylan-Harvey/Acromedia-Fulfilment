<?php
/**
 * @return array
 *
 * implements hook hook_menu()
 * builds the menu tabs for the site, both in the admin bar and in the page overlay.
 *
 */
function commerce_fulfilment_menu() {
  $items = array();

  //Creates the commerce fulfilment link
  $items['admin/commerce/orders/%commerce_order/commerce_fulfilment'] = array(
    'title' => 'Fulfilment',
    'page callback' => 'commerce_fulfilment_package_content',
    'page arguments' => array(3),
    'access callback' => 'commerce_order_access',
    'access arguments' => array('update', 3),
    'type' => MENU_LOCAL_TASK,
    'weight' => 50,
    'file' => 'commerce_fulfilment.pages.inc',
    'file path' => drupal_get_path('module', 'commerce_fulfilment') . '/includes',
  );
  // Creates the admin option link under the Fulfilment tab
  $items['admin/commerce/orders/%commerce_order/commerce_fulfilment/admin'] = array(
    'title'=> 'Admin Options',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_fulfilment_admin_form', 3),
    'access callback' => 'commerce_order_access',
    'access arguments' => array('update', 3),
    'access callback' => true,
    'type' => MENU_LOCAL_TASK,
    'weight' => 51,
    'file' => 'commerce_fulfilment.admin.inc',
    'file path' => drupal_get_path('module', 'commerce_fulfilment') . '/includes',
  );
  //creates link to the package page
  $items['admin/commerce/orders/%commerce_order/commerce_fulfilment/orders'] = array(
    'title' => 'Packages',
    'page callback' => 'commerce_fulfilment_package_content',
    'page arguments' => array(3),
    'access callback' => 'commerce_order_access',
    'access arguments' => array('update', 3),
    'type' => MENU_LOCAL_TASK,
    'weight' => -7,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'commerce_fulfilment.pages.inc',
    'file path' => drupal_get_path('module', 'commerce_fulfilment') . '/includes',
  );
  //Creates link to the shipment page.
  $items['admin/commerce/orders/%commerce_order/commerce_fulfilment/shipments'] = array(
    'title' => 'Shipments',
    'page callback' => 'commerce_fulfilment_shipment_content',
    'page arguments' => array(3),
    'access callback' => 'commerce_order_access',
    'access arguments' => array('update', 3),
    'type' => MENU_LOCAL_TASK,
    'weight' => 0,
    'file' => 'commerce_fulfilment.pages.inc',
    'file path' => drupal_get_path('module', 'commerce_fulfilment') . '/includes',
  );
  //Menu item for shipping label
  $items['admin/commerce/orders/%/commerce_fulfilment/%/shipping_label'] = array(
    'title' => 'Shipping Label',
    'page callback' => 'commerce_fulfilment_shipping_label_content',
    'page arguments' => array(5),
    'access callback' => true,
    'type' => MENU_CALLBACK,
    'file' => 'commerce_fulfilment.pages.inc',
    'file path' => drupal_get_path('module', 'commerce_fulfilment') . '/includes',
  );
  //Menu item for packing slip
  $items['admin/commerce/orders/%/commerce_fulfilment/%/packing_slip'] = array(
    'title' => 'Packing Slip',
    'page callback' => 'commerce_fulfilment_packing_slip_content',
    'page arguments' => array(5),
    'access callback' => true,
    'type' => MENU_CALLBACK,
    'file' => 'commerce_fulfilment.pages.inc',
    'file path' => drupal_get_path('module', 'commerce_fulfilment') . '/includes',
  );
  return $items;
}
/**
 * @return array
 * implements hook_views_api
 */
function commerce_fulfilment_views_api() {
  return array('api' => 3.0);
}

/**
 * @return mixed
 * implements hook_views_default_views
 */
function commerce_fulfilment_views_default_views() {

  $files = file_scan_directory(drupal_get_path('module', 'commerce_fulfilment') . '/views', '/.*\.inc$/');

  foreach ($files as $filepath => $file) {
    require $filepath;
    if(isset($view)) {
      $views[$view->name] = $view;
    }
  }

  return $views;
}
/**
 * Implements hook_entity_info()
 * Tells the Drupal API about our custom entities.
 */
function commerce_fulfilment_entity_info(){
  $info = array();
  $info['commerce_fulfilment_package'] = array(
    'label' => t('commerce_fulfilment_package'),
    'base table' => 'commerce_fulfilment_packages',
    'entity keys' => array(
      'id' => 'package_id'
    ),
    'entity class'=> 'packageEntity',
    'controller class' =>'packageEntityController',
    'fieldable' => true,
    'module'=>'commerce_fulfilment',
  );
  $info['commerce_fulfilment_shipment'] = array(
    'label' => t('commerce_fulfilment_shipment'),
    'base table' => 'commerce_fulfilment_shipments',
    'entity keys' => array(
      'id' => 'shipment_id',
    ),
    'entity class'=> 'shipmentEntity',
    'controller class' =>'shipmentEntityController',
    'fieldable' => true,
    'module'=>'commerce_fulfilment',
  );
  return $info;
}
/**
 * Implement hook_enable()
 */
function commerce_fulfilment_enable() {
  commerce_fulfilment_configure_package_type();
}
/**
 * @param $type
 *
 * Ensures the line item field is present on the default order bundle.
 */
function commerce_fulfilment_configure_package_type($type = 'commerce_fulfilment_package') {
  // Look for or add a line item reference field to the order type.
  $field_name = 'commerce_fulfilment_line_items';
  commerce_activate_field($field_name);
  field_cache_clear();

  $field = field_info_field($field_name);
  $instance = field_info_instance('commerce_fulfilment_package', $field_name, $type);

  if (empty($field)) {
    $field = array(
      'field_name' => $field_name,
      'type' => 'commerce_line_item_reference',
      'cardinality' => FIELD_CARDINALITY_UNLIMITED,
      'entity_types' => array('commerce_fulfilment_package'),
      'translatable' => FALSE,
      'locked' => TRUE,
    );
    $field = field_create_field($field);
  }

  if (empty($instance)) {
    $instance = array(
      'field_name' => $field_name,
      'entity_type' => 'commerce_fulfilment_package',
      'bundle' => $type,
      'label' => t('Line items'),
      'settings' => array(),
      'widget' => array(
        'type' => 'commerce_line_item_manager',
        'weight' => -10,
      ),
      'display' => array(),
    );

    // Set the default display formatters for various view modes.
    foreach (array('default', 'customer', 'administrator') as $view_mode) {
      $instance['display'][$view_mode] = array(
        'label' => 'hidden',
        'type' => 'commerce_line_item_reference_view',
        'weight' => -10,
      );
    }

    field_create_instance($instance);
  }
}

class shipmentEntityController extends EntityAPIController{

}
class shipmentEntity extends Entity{

}
class packageEntityController extends EntityAPIController{

}
class packageEntity extends Entity{

}
